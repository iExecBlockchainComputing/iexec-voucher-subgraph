name: Deploy Subgraph

on:
  workflow_dispatch:
    inputs:
      VOUCHER_HUB_START_BLOCK:
        description: 'Start Block for Subgraph Deployment'
        required: false
        default: '30306387'
      VOUCHER_HUB_ADDRESS:
        description: 'Voucher Hub Address'
        required: false
        default: '0x3137B6DF4f36D338b82260eDBB2E7bab034AFEda'
      TARGET:
        description: 'Deployment Target (tmp, staging, prod)'
        required: true
        type: choice
        options:
          - tmp
          - staging
          - prod

jobs:
  # TODO: See how to ensure that the default CI workflow has run before this workflow

  get-latest-tag:
    runs-on: ubuntu-latest
    outputs:
      latest_tag: ${{ steps.latest_tag.outputs.tag }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Git Tag
        id: latest_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1

  verify-npm-version:
    needs: get-latest-tag
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Ensure npm package version matches Git tag
        run: |
          LATEST_TAG="${{ needs.get-latest-tag.outputs.latest_tag }}"
          PACKAGE_VERSION=$(npm pkg get version | tr -d '"')

          echo "🔹 Latest Git Tag: $LATEST_TAG"
          echo "🔹 package.json Version: $PACKAGE_VERSION"

          if [[ "$LATEST_TAG" != "v$PACKAGE_VERSION" ]]; then
            echo "❌ Tag version ($LATEST_TAG) does not match package.json version (v$PACKAGE_VERSION)"
            exit 1
          fi

          echo "✅ Versions match! Proceeding..."

  deploy-subgraph:
    needs: 
      - get-latest-tag
      - verify-npm-version
    runs-on:
      group: Azure_runners
      labels: [ self-hosted, Linux, X64 ]
    environment: ${{ github.event.inputs.TARGET == 'staging' && 'staging' || 'prod' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Retrieve Docker Image Tag
        run: |
          TARGET="${{ github.event.inputs.TARGET }}"
          LAST_TAG="${{ needs.get-latest-tag.outputs.latest_tag }}"

          if [[ "$TARGET" == "prod" || "$TARGET" == "tmp" ]]; then
            VERSION="$LAST_TAG"  # Use last Git tag
          else
            VERSION="${LAST_TAG}-rc"  # Append "-rc" for staging releases
          fi

          IMAGE_TAG="iexechub/voucher-subgraph-deployer:$VERSION"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "✅ Resolved IMAGE_TAG: $IMAGE_TAG"

      - name: Set Subgraph Name
        run: |
          TARGET="${{ github.event.inputs.TARGET }}"

          if [[ "$TARGET" == "staging" ]]; then
            echo "SUBGRAPH_NAME=bellecour/staging-iexec-voucher" >> $GITHUB_ENV
          elif [[ "$TARGET" == "tmp" ]]; then
            echo "SUBGRAPH_NAME=bellecour/tmp-iexec-voucher" >> $GITHUB_ENV
          elif [[ "$TARGET" == "prod" ]]; then
            echo "SUBGRAPH_NAME=bellecour/iexec-voucher" >> $GITHUB_ENV
          fi

      - name: Deploy Subgraph using Docker
        env:
          VOUCHER_HUB_START_BLOCK: ${{ inputs.VOUCHER_HUB_START_BLOCK }}
          VOUCHER_HUB_ADDRESS: ${{ inputs.VOUCHER_HUB_ADDRESS }}
          SUBGRAPH_NAME: ${{ env.SUBGRAPH_NAME }}
        run: |
          if [ "${{ github.event.inputs.TARGET }}" == "staging" ]; then
            export GRAPHNODE_URL="${{ vars.STAGING_GRAPHNODE_URL }}"
            export IPFS_URL="${{ vars.STAGING_IPFS }}"
          else
            export GRAPHNODE_URL="${{ vars.GRAPHNODE_URL }}"
            export IPFS_URL="${{ vars.IPFS_URL }}"
          fi

          echo "Deploying commit $GITHUB_SHA on subgraph $SUBGRAPH_NAME"
          
          docker run --rm \
            -e VOUCHER_HUB_START_BLOCK="${VOUCHER_HUB_START_BLOCK}" \
            -e VOUCHER_HUB_ADDRESS="${VOUCHER_HUB_ADDRESS}" \
            -e SUBGRAPH_NAME="${SUBGRAPH_NAME}" \
            -e GRAPHNODE_URL="${GRAPHNODE_URL}" \
            -e IPFS_URL="${IPFS_URL}" \
            "${{ env.IMAGE_TAG }}"
