name: Build and Push Subgraph Docker Image

on:
  workflow_dispatch:
    inputs:
      TARGET:
        description: 'Deployment Target (staging, prod)'
        required: true
        type: choice
        options:
          - staging
          - prod
  workflow_call:
    inputs:
      TARGET:
        description: 'Deployment Target (staging, prod)'
        required: true
        type: string

jobs:
  validate-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Check branch compatibility
        run: |
          TARGET="${{ github.event.inputs.TARGET }}"
          BRANCH="${{ github.ref_name }}"

          if [[ "$TARGET" == "staging" ]]; then
            echo "❌ ERROR: Staging deployments are only allowed from the develop branch."
            exit 1
          elif [[ "$TARGET" == "prod" && "$BRANCH" != "main" ]]; then
            echo "❌ ERROR: Production deployments are only allowed from the main branch."
            exit 1
          fi
          echo "✅ Target $TARGET is valid for branch $BRANCH"

  build-and-push:
    runs-on:
      group: Azure_runners
      labels: [ self-hosted, Linux, X64 ]
    needs: validate-branch
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Init
        run: npm ci

      - name: Check Format
        run: npm run check-format

      - name: Run unit tests
        run: npm run test

      - name: Codegen
        run: npm run codegen

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Get version based on target
        id: version
        run: |
          TARGET="${{ github.event.inputs.TARGET }}"

          if [[ "$TARGET" == "prod" ]]; then
            VERSION=$(npm pkg get version | tr -d '"')
          else
            VERSION=$(echo $GITHUB_SHA | cut -c1-8)
          fi

          IMAGE_TAG="iexechub/voucher-subgraph-deployer:$TARGET-$VERSION"
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          file: docker/Dockerfile
          push: true
          tags: ${{ env.IMAGE_TAG }}
