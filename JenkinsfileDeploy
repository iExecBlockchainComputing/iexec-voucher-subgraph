node('docker') {

    // Global variables
    def userInput
    def graphNodeUrl
    def envName
    def ipfsUrl

    stage('Set properties') {
        timeout(time: 5, unit: 'MINUTES') {
            userInput = input(
                id: 'select-deployment',
                message: 'Select environment & service',
                parameters : [
                    choice(
                        name: 'environment',
                        choices: ['custom', 'staging', 'tmp','production'],
                        description: 'Select deployment environment'
                    ),
                    string(name: 'networkName', description: 'Network Name', defaultValue: 'bellecour', trim: true),
                    string(name: 'voucherHubAddress', description: 'Voucher Hub Address', defaultValue: '0x3137B6DF4f36D338b82260eDBB2E7bab034AFEda', trim: true),
                    string(name: 'voucherHubStartBlock', description: 'Start Block for Voucher Hub', defaultValue: '30306387', trim: true),
                    string(name: 'versionLabel', description: 'Version Label for Subgraph Deployment', defaultValue: 'develop', trim: true),
                    string(name: 'dockerImageVersion', description: 'Version of the deployer docker image to use', defaultValue: '', trim: true)
                ]
            )
        }

        // Set URLs based on environment
        switch(userInput.environment) {
            case 'production':
                graphNodeUrl = 'azubgrpbp-thegraph.public.az2.internal'
                ipfsUrl = 'ipfs-upload.v8-bellecour.iex.ec'
                envName = '/'
                break
            case 'tmp':
                graphNodeUrl = 'azubgrpbp-thegraph.public.az2.internal'
                ipfsUrl = 'ipfs-upload.v8-bellecour.iex.ec'
                envName = '/tmp-'
                break
            case 'staging':
                graphNodeUrl = 'azubgrpbx-thegraph-staging.public.az2.internal'
                ipfsUrl = 'ipfs-upload.stagingv8.iex.ec'
                envName = '/staging-'
                break
            case 'custom':
                // Ask for custom URLs if environment is 'custom'
                def customUrls = input(
                    id: 'custom-urls',
                    message: 'Enter custom URLs',
                    parameters: [
                        string(name: 'graphNodeUrl', description: 'Graph Node URL', defaultValue: 'localhost', trim: true),
                        string(name: 'ipfsUrl', description: 'IPFS URL', defaultValue: 'localhost', trim: true)
                    ]
                )
                graphNodeUrl = customUrls.graphNodeUrl
                ipfsUrl = customUrls.ipfsUrl
                envName = ''
                break
            default:
                error "Invalid environment selected"
        }

        println """
            Environment: $userInput.environment
            Graph Node URL: http://$graphNodeUrl:8020
            IPFS URL: https://$ipfsUrl
            Network Name: $userInput.networkName
            Voucher Hub Address: $userInput.voucherHubAddress
            Start Block: $userInput.voucherHubStartBlock
            Version Label: $userInput.versionLabel
            Deployer image version: $userInput.dockerImageVersion
        """

        if (!(userInput.dockerImageVersion?.trim())) {
            error "docker image version parameter cannot be null or empty."
        }
    }

    stage('Clean Workspace') {
        cleanWs()
    }

    stage('Checkout scm') {
        checkout scm
    }

    stage('Run operation') {
        withCredentials([
            usernamePassword(credentialsId: 'docker-regis', usernameVariable: 'username', passwordVariable: 'password')
        ]) {
            // Login to download Docker image
            sh "echo -n '${password}' | docker login --username '${username}' --password-stdin docker-regis.iex.ec"

            // Run the container for subgraph deployment
            sh """
                docker run \
                    --rm \
                    -e NETWORK_NAME='${userInput.networkName}${envName}' \
                    -e VOUCHER_HUB_ADDRESS='$userInput.voucherHubAddress' \
                    -e VOUCHER_HUB_START_BLOCK='$userInput.voucherHubStartBlock' \
                    -e IPFS_URL='https://${ipfsUrl}' \
                    -e GRAPHNODE_URL='http://${graphNodeUrl}:8020' \
                    -e VERSION_LABEL='$userInput.versionLabel' \
                    iexechub/voucher-subgraph-deployer:$userInput.dockerImageVersion
            """
            
            // Logout to remove docker credentials
            sh "docker logout docker-regis.iex.ec"
        }
    }
}

azubgrpbx-thegraph-staging.public.az2.internal
ipfs-upload.stagingv8.iex.ec